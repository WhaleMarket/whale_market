import React, { useState, useEffect, useRef, useContext } from 'react';
import styled from 'styled-components';
import StartButton from './StartButton';
import profile_icon from '../../assets/basic-profile-img.png';
import upload_icon from '../../assets/upload-file.png';
import axios from 'axios';
import { API_URL } from '../../constants/defaultUrl';
import AuthContext from '../../context/AuthProvider';

const Form = styled.form`
    display: flex;
    flex-direction: column;
    margin-top: 1.875rem;
`

const Fieldset = styled.fieldset`
    display: flex;
    flex-direction: column;
`

const ProfileImgWrapper = styled.div`
    width: 110px;
    height: 110px;
    margin: 0 auto;
    background-image: url(${profile_icon});
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    position: relative; 
    border-radius: 9999px;
    margin-bottom: 30px;
`

const ProfileImgLable = styled.label`
    width: 6.875rem;
    margin: 0 auto;
`

const Img = styled.img`
    position: absolute;
    width: 2.250rem;
    right: 0;
    bottom: 0;
    cursor: pointer;
`

const ProfileImgInput = styled.input`
    overflow: hidden;
    position: absolute;
    width: 0;
    height: 0;
    line-height: 0;
    text-indent: -9999px;
`
const FormLabel = styled.label`
    margin: 1rem 0 0.625rem 0;
    color: #767676;
    font-size: 0.750rem;
`

const FormInput = styled.input`
    width: 20.125rem;
    border: none;
    border-bottom: 1px solid #DBDBDB;
    color: #000000;
    font-size: 0.875rem;
    &:focus {
        outline: none;
        border-bottom: 1px solid #00BCD4;
    }
    &::placeholder {
        font-style: normal;
        font-weight: 400;
        font-size: 14px;
        line-height: 14px;
        color: #DBDBDB
    }
`

const ErrorMessage = styled.p`
    margin-top: 0.375rem;
    color: #EB5757;
    font-size: 0.750rem;
`

function ProfileForm() {
    const { auth, setAuth } = useContext(AuthContext);
    const usernameRef = useRef();
    const accountnameRef = useRef();

    const [username, setUsername] = useState('');
    const [accountname, setAccountname] = useState('');
    const [intro, setIntro] = useState('');
    const [success, setSuccess] = useState(false);

    const [errMsgForUsername, setErrMsgForUsername] = useState('');
    const [errMsgForAccountname, setErrMsgForAccountname] = useState('');

    const [isValidUsername, setIsValidUsername] = useState(false);
    const [isValidAccountname, setIsValidAccountname] = useState(false);

    useEffect(() => {
        usernameRef.current.focus();
    }, []);

    useEffect(() => {
        if (username.length > 1 && username.length < 11) {
            setIsValidUsername(true);
        }
    }, [username, accountname]);

    useEffect(() => {
        if (isValidAccountname && isValidUsername) {
            setSuccess(true);
        }
    }, [usernameRef, accountnameRef]);

    // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ
    const [image, setImage] = useState('https://mandarin.api.weniv.co.kr/1658318303337.png');
    const previewImage = useRef();

    // Ïù¥ÎØ∏ÏßÄ filename ÏùëÎãµ Î∞õÍ∏∞
    function handleImageChange (event) {
        const loadImage = event.target.files;
        const formData = new FormData();
        formData.append('image', loadImage[0]);
        onLoadImage(formData, loadImage);
    }

    async function onLoadImage (formData, loadImage) {
        try {
            const config = {
                headers: {
                    "Content-Type": "multipart/form-data",
                },
            };
            const response = await axios.post(
                `${API_URL}/image/uploadfile`,
                formData,
                config
            );
            if (response?.data?.filename) {
                setImage(`${API_URL}/` + response?.data?.filename);
                preview(loadImage);
            } else {
                alert('.jpg, .gif, .png, .jpeg, .bmp, .tif, .heic ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
            }
        } catch (error) {
            console.error(error);
            alert('ÏûòÎ™ªÎêú Ï†ëÍ∑ºÏûÖÎãàÎã§.');
        }
    };

    function preview(loadImage) {
        const reader = new FileReader();
        reader.onload = () => (
            previewImage.current.style.backgroundImage = `url(${reader.result})`
        );
        reader.readAsDataURL(loadImage[0]);
    };

    // username Í≤ÄÏ¶ù
    const handleOnBlurUsername = async (event) => {
        event.preventDefault();
        setErrMsgForUsername('');
        try {
            if (!(username.length > 1 && username.length < 11)) {
                setErrMsgForUsername('*2Í∏ÄÏûê Ïù¥ÏÉÅ 10Í∏ÄÏûê ÎØ∏ÎßåÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.');
                setIsDisabled(true);
            } 
        } catch (error) {
            console.error(error);
        }
    };

    // accountname Í≤ÄÏ¶ù ÏöîÏ≤≠ Î∞è ÏóêÎü¨Ï≤òÎ¶¨
    const handleOnBlur = async (event) => {
        event.preventDefault();
        setErrMsgForAccountname('');

        try {
            const reqData = {
                user: { accountname: accountname }
            };
            const config = {
                headers: {
                    "Content-Type": "application/json",
                },
            };
            const response = await axios.post(
                `${API_URL}/user/accountnamevalid`,
                reqData,
                config
            );
            if (response?.data?.message === 'Ïù¥ÎØ∏ Í∞ÄÏûÖÎêú Í≥ÑÏ†ïID ÏûÖÎãàÎã§.') {
                setErrMsgForAccountname('*' + response.data.message);
                setIsDisabled(true);
            } else if (!accountname) {
                setErrMsgForAccountname('*Í≥ÑÏ†ïIDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            } else if (!accountnameRegex.test(accountname)) {
                setErrMsgForAccountname('*ÏòÅÎ¨∏, Ïà´Ïûê, Î∞ëÏ§Ñ Î∞è ÎßàÏπ®ÌëúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
            } else if (response?.data?.message === 'ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í≥ÑÏ†ïID ÏûÖÎãàÎã§.') {
                setErrMsgForAccountname('*' + response.data.message);
                setIsValidAccountname(true);
            }
        } catch (error) {
            console.error(error);
        }
    };

    // ÏÜåÍ∞ú
    function handleChangeIntro(event) {
        setIntro(event.target.value);
    };

    // ÌöåÏõêÍ∞ÄÏûÖ Ï†ïÎ≥¥ Ï†úÏ∂ú
    const handleSubmit = async (event) => {
        alert('üéâ Ïõ®ÏùºÎßàÏºìÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§. Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
        event.preventDefault();
        window.location.href = '/emaillogin';
        try {
            const reqData = {
                user: { 
                    username: username,
                    email: auth.email,
                    password: auth.password,
                    accountname: accountname,
                    intro: intro,
                    image: image
                }
            };
            const config = {
                headers: {
                    "Content-Type": "application/json",
                },
            };
            await axios.post(
                `${API_URL}/user`,
                reqData,
                config
            );
            setAuth({ username, accountname, intro, image });
        } catch (error) {
            console.error(error);
        }
    };

    // Î≤ÑÌäº ÌôúÏÑ±ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [isDisabled, setIsDisabled] = useState(true);
    const accountnameRegex = /^[-._a-z0-9]+$/;
    const isPassedProfile = () => {
        return accountnameRegex.test(accountname) && isValidUsername ? setIsDisabled(false) : setIsDisabled(true);
    };

    return (
        <>
            {success ? (
                window.location.href = '/emaillogin'
            ) : (
                <Form onSubmit={handleSubmit}>
                    <Fieldset>
                        <legend className='a11yhidden'>ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Î≥ÄÍ≤Ω</legend>

                        <ProfileImgWrapper ref={previewImage}>
                            <ProfileImgLable htmlFor='profileImg'>
                                <Img src={upload_icon} alt='ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú'/>
                            </ProfileImgLable>
                        </ProfileImgWrapper>
                        <ProfileImgInput 
                            type='file' 
                            accept='image/*' 
                            id='profileImg'
                            onChange={handleImageChange}
                        />
                    </Fieldset>


                    <Fieldset>
                        <legend className='a11yhidden'>Í∞úÏù∏Ï†ïÎ≥¥ Î≥ÄÍ≤Ω</legend>

                        <FormLabel htmlFor='username' style={{marginTop:'0'}}>ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ</FormLabel>
                        <FormInput 
                            type='text' 
                            id='username' 
                            placeholder='2~10Ïûê Ïù¥ÎÇ¥Ïó¨Ïïº Ìï©ÎãàÎã§.'  
                            required
                            ref={usernameRef}
                            onChange={(event) => setUsername(event.target.value)}
                            onKeyUp={isPassedProfile}
                            onBlur={handleOnBlurUsername}
                        />
                        {errMsgForUsername && <ErrorMessage>{errMsgForUsername}</ErrorMessage>}

                        <FormLabel htmlFor='accountname'>Í≥ÑÏ†ï ID</FormLabel>
                        <FormInput 
                            type='text' 
                            id='accountname' 
                            placeholder='ÏòÅÎ¨∏, Ïà´Ïûê, ÌäπÏàòÎ¨∏Ïûê(.),(_)Îßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.' 
                            required
                            ref={accountnameRef}
                            onChange={(event) => setAccountname(event.target.value)}
                            onKeyUp={isPassedProfile}
                            onBlur={handleOnBlur}
                        />
                        {errMsgForAccountname && <ErrorMessage>{errMsgForAccountname}</ErrorMessage>}
                        
                        <FormLabel htmlFor='intro'>ÏÜåÍ∞ú</FormLabel>
                        <FormInput 
                            type='text' 
                            id='intro' 
                            placeholder='ÏûêÏã†Í≥º ÌåêÎß§Ìï† ÏÉÅÌíàÏóê ÎåÄÌï¥ ÏÜåÍ∞úÌï¥ Ï£ºÏÑ∏Ïöî!'
                            onChange={handleChangeIntro}
                        />
                    </Fieldset>
                    <StartButton 
                        disabled={isDisabled}
                    />
                </Form>
            )}
        </>
    );
};

export default ProfileForm;